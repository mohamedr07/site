"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&b302i$e0q!3rvx!z92&dmrg3!4)bpzdgh2ix!#uvgt4-awe%x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'upload_cv',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'bla', 
        'USER': 'postgres', 
        'PASSWORD': 'root',
        'HOST': 'localhost', 
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

AUTHENTICATION_BACKENDS = [
    "django_python3_ldap.auth.LDAPBackend",
    'django.contrib.auth.backends.ModelBackend',
    ]

LDAP_AUTH_URL = "ldap.forumsys.com:389"

LDAP_AUTH_CONNECTION_USERNAME = 'cn=read-only-admin,dc=example,dc=com'
LDAP_AUTH_CONNECTION_PASSWORD = 'password'

LDAP_AUTH_SEARCH_BASE = "dc=example,dc=com"

# The LDAP class that represents a user.
LDAP_AUTH_OBJECT_CLASS = "inetOrgPerson"

LDAP_AUTH_USE_TLS = False


# A tuple of django model fields used to uniquely identify a user.
LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)

# Path to a callable that takes a dict of {model_field_name: value},
# returning a dict of clean model data.
# Use this to customize how data loaded from LDAP is saved to the User model.
LDAP_AUTH_CLEAN_USER_DATA = "django_python3_ldap.utils.clean_user_data"

# Path to a callable that takes a user model, a dict of {ldap_field_name: [value]}
# a LDAP connection object (to allow further lookups), and saves any additional
# user relationships based on the LDAP data.
# Use this to customize how data loaded from LDAP is saved to User model relations.
# For customizing non-related User model fields, use LDAP_AUTH_CLEAN_USER_DATA.
LDAP_AUTH_SYNC_USER_RELATIONS = "django_python3_ldap.utils.sync_user_relations"

# Path to a callable that takes a dict of {ldap_field_name: value},
# returning a list of [ldap_search_filter]. The search filters will then be AND'd
# together when creating the final search filter.
LDAP_AUTH_FORMAT_SEARCH_FILTERS = "django_python3_ldap.utils.format_search_filters"

from django_python3_ldap.utils import format_search_filters

def custom_format_search_filters(ldap_fields):
    # Add in simple filters.
    ldap_fields["member"] = "foo"
    # Call the base format callable.
    search_filters = format_search_filters(ldap_fields)
    # Advanced: apply custom LDAP filter logic.
    search_filters.append("(|(member=scientists)(member=mathematicians))")
    # All done!
    return search_filters


# Path to a callable that takes a dict of {model_field_name: value}, and returns
# a string of the username to bind to the LDAP server.
# Use this to support different types of LDAP server.
LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_openldap"


# from ldap3 import Server, Connection


# username = 'einstein'
# password = 'password'

# server = Server(LDAP_AUTH_URL)
# c = Connection(server)


# c.open()
# c.bind()

# if c.bind():
#     user_search_filter = '(uid={})'.format(username)
#     c.search(search_base=LDAP_AUTH_SEARCH_BASE,
#                 search_filter=user_search_filter)

# username = c.response[0]['dn']
# if c.rebind(user=username, password=password):
#     print('...................................')
#     print(c)
#     print('...................................')
# else:
#     print('error')

# c.unbind()

# server = LdapServer({
#     'port': 3333,
#     'bind_dn': 'cn=admin,dc=zoldar,dc=net',
#     'password': 'pass1',
#     'base': {'objectclass': ['domain'],
#              'dn': 'dc=zoldar,dc=net',
#              'attributes': {'dc': 'zoldar'}},
#     'entries': [
#         {'objectclass': 'domain',
#          'dn': 'dc=users,dc=zoldar,dc=net',
#          'attributes': {'dc': 'users'}},
#         {'objectclass': 'organization',
#          'dn': 'o=foocompany,dc=users,dc=zoldar,dc=net',
#          'attributes': {'o': 'foocompany'}},
#     ]
# })


# try:
#     server.start()

#     dn = "cn=admin,dc=zoldar,dc=net"
#     pw = "pass1"

#     srv = ldap3.Server('localhost', port=3333)
#     conn = ldap3.Connection(srv, user=dn, password=pw, auto_bind=True)

#     print(conn.extend.standard.who_am_i())
   
#     base_dn = 'dc=zoldar,dc=net'
#     search_filter = '(objectclass=domain)'
#     attrs = ['dc']

    
#     conn.search(base_dn, search_filter, attributes=attrs)

#     print(conn.response)
#     # [{
#     #    'dn': 'o=foocompany,dc=users,dc=zoldar,dc=net',
#     #    'raw_attributes': {'o': [b'foocompany']},
#     #    'attributes': {'o': ['foocompany']},
#     #    'type': 'searchResEntry'
#     # }]
# finally:
#     server.stop()
